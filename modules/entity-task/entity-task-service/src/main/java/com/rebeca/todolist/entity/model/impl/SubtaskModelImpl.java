/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.rebeca.todolist.entity.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.rebeca.todolist.entity.model.Subtask;
import com.rebeca.todolist.entity.model.SubtaskModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Subtask service. Represents a row in the &quot;ToDoList_Subtask&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SubtaskModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SubtaskImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SubtaskImpl
 * @generated
 */
@JSON(strict = true)
public class SubtaskModelImpl
	extends BaseModelImpl<Subtask> implements SubtaskModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a subtask model instance should use the <code>Subtask</code> interface instead.
	 */
	public static final String TABLE_NAME = "ToDoList_Subtask";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"subtaskId", Types.BIGINT},
		{"taskId", Types.BIGINT}, {"title", Types.VARCHAR},
		{"status", Types.INTEGER}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subtaskId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("taskId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ToDoList_Subtask (uuid_ VARCHAR(75) null,subtaskId LONG not null primary key,taskId LONG,title VARCHAR(75) null,status INTEGER,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table ToDoList_Subtask";

	public static final String ORDER_BY_JPQL = " ORDER BY subtask.taskId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ToDoList_Subtask.taskId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TASKID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SubtaskModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _subtaskId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSubtaskId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _subtaskId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Subtask.class;
	}

	@Override
	public String getModelClassName() {
		return Subtask.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Subtask, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Subtask, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Subtask, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Subtask)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Subtask, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Subtask, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Subtask)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Subtask, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Subtask, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Subtask, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Subtask, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Subtask, Object>>();

			attributeGetterFunctions.put("uuid", Subtask::getUuid);
			attributeGetterFunctions.put("subtaskId", Subtask::getSubtaskId);
			attributeGetterFunctions.put("taskId", Subtask::getTaskId);
			attributeGetterFunctions.put("title", Subtask::getTitle);
			attributeGetterFunctions.put("status", Subtask::getStatus);
			attributeGetterFunctions.put("groupId", Subtask::getGroupId);
			attributeGetterFunctions.put("companyId", Subtask::getCompanyId);
			attributeGetterFunctions.put("userId", Subtask::getUserId);
			attributeGetterFunctions.put("userName", Subtask::getUserName);
			attributeGetterFunctions.put("createDate", Subtask::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Subtask::getModifiedDate);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Subtask, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Subtask, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Subtask, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Subtask, String>)Subtask::setUuid);
			attributeSetterBiConsumers.put(
				"subtaskId", (BiConsumer<Subtask, Long>)Subtask::setSubtaskId);
			attributeSetterBiConsumers.put(
				"taskId", (BiConsumer<Subtask, Long>)Subtask::setTaskId);
			attributeSetterBiConsumers.put(
				"title", (BiConsumer<Subtask, String>)Subtask::setTitle);
			attributeSetterBiConsumers.put(
				"status", (BiConsumer<Subtask, Integer>)Subtask::setStatus);
			attributeSetterBiConsumers.put(
				"groupId", (BiConsumer<Subtask, Long>)Subtask::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId", (BiConsumer<Subtask, Long>)Subtask::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId", (BiConsumer<Subtask, Long>)Subtask::setUserId);
			attributeSetterBiConsumers.put(
				"userName", (BiConsumer<Subtask, String>)Subtask::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Subtask, Date>)Subtask::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Subtask, Date>)Subtask::setModifiedDate);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getSubtaskId() {
		return _subtaskId;
	}

	@Override
	public void setSubtaskId(long subtaskId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subtaskId = subtaskId;
	}

	@JSON
	@Override
	public long getTaskId() {
		return _taskId;
	}

	@Override
	public void setTaskId(long taskId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_taskId = taskId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTaskId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("taskId"));
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Subtask.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Subtask.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Subtask toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Subtask>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SubtaskImpl subtaskImpl = new SubtaskImpl();

		subtaskImpl.setUuid(getUuid());
		subtaskImpl.setSubtaskId(getSubtaskId());
		subtaskImpl.setTaskId(getTaskId());
		subtaskImpl.setTitle(getTitle());
		subtaskImpl.setStatus(getStatus());
		subtaskImpl.setGroupId(getGroupId());
		subtaskImpl.setCompanyId(getCompanyId());
		subtaskImpl.setUserId(getUserId());
		subtaskImpl.setUserName(getUserName());
		subtaskImpl.setCreateDate(getCreateDate());
		subtaskImpl.setModifiedDate(getModifiedDate());

		subtaskImpl.resetOriginalValues();

		return subtaskImpl;
	}

	@Override
	public Subtask cloneWithOriginalValues() {
		SubtaskImpl subtaskImpl = new SubtaskImpl();

		subtaskImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		subtaskImpl.setSubtaskId(
			this.<Long>getColumnOriginalValue("subtaskId"));
		subtaskImpl.setTaskId(this.<Long>getColumnOriginalValue("taskId"));
		subtaskImpl.setTitle(this.<String>getColumnOriginalValue("title"));
		subtaskImpl.setStatus(this.<Integer>getColumnOriginalValue("status"));
		subtaskImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		subtaskImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		subtaskImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		subtaskImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		subtaskImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		subtaskImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return subtaskImpl;
	}

	@Override
	public int compareTo(Subtask subtask) {
		int value = 0;

		if (getTaskId() < subtask.getTaskId()) {
			value = -1;
		}
		else if (getTaskId() > subtask.getTaskId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Subtask)) {
			return false;
		}

		Subtask subtask = (Subtask)object;

		long primaryKey = subtask.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Subtask> toCacheModel() {
		SubtaskCacheModel subtaskCacheModel = new SubtaskCacheModel();

		subtaskCacheModel.uuid = getUuid();

		String uuid = subtaskCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			subtaskCacheModel.uuid = null;
		}

		subtaskCacheModel.subtaskId = getSubtaskId();

		subtaskCacheModel.taskId = getTaskId();

		subtaskCacheModel.title = getTitle();

		String title = subtaskCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			subtaskCacheModel.title = null;
		}

		subtaskCacheModel.status = getStatus();

		subtaskCacheModel.groupId = getGroupId();

		subtaskCacheModel.companyId = getCompanyId();

		subtaskCacheModel.userId = getUserId();

		subtaskCacheModel.userName = getUserName();

		String userName = subtaskCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			subtaskCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			subtaskCacheModel.createDate = createDate.getTime();
		}
		else {
			subtaskCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			subtaskCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			subtaskCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return subtaskCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Subtask, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Subtask, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Subtask, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Subtask)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Subtask>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Subtask.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _subtaskId;
	private long _taskId;
	private String _title;
	private int _status;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Subtask, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Subtask)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("subtaskId", _subtaskId);
		_columnOriginalValues.put("taskId", _taskId);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("subtaskId", 2L);

		columnBitmasks.put("taskId", 4L);

		columnBitmasks.put("title", 8L);

		columnBitmasks.put("status", 16L);

		columnBitmasks.put("groupId", 32L);

		columnBitmasks.put("companyId", 64L);

		columnBitmasks.put("userId", 128L);

		columnBitmasks.put("userName", 256L);

		columnBitmasks.put("createDate", 512L);

		columnBitmasks.put("modifiedDate", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Subtask _escapedModel;

}